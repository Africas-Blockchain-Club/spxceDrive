/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Spxce {
  export type FileStruct = { owner: AddressLike; cid: string; key: string };

  export type FileStructOutput = [owner: string, cid: string, key: string] & {
    owner: string;
    cid: string;
    key: string;
  };
}

export interface SpxceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addFile"
      | "createUser"
      | "getFiles"
      | "getSharedFiles"
      | "getUser"
      | "isUser"
      | "shareFile"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addFile",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createUser",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFiles", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSharedFiles",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getUser", values?: undefined): string;
  encodeFunctionData(functionFragment: "isUser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "shareFile",
    values: [AddressLike, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "addFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFiles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSharedFiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shareFile", data: BytesLike): Result;
}

export interface Spxce extends BaseContract {
  connect(runner?: ContractRunner | null): Spxce;
  waitForDeployment(): Promise<this>;

  interface: SpxceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addFile: TypedContractMethod<
    [cid: string, key: string],
    [void],
    "nonpayable"
  >;

  createUser: TypedContractMethod<[], [void], "nonpayable">;

  getFiles: TypedContractMethod<[], [Spxce.FileStructOutput[]], "view">;

  getSharedFiles: TypedContractMethod<[], [Spxce.FileStructOutput[]], "view">;

  getUser: TypedContractMethod<[], [string], "view">;

  isUser: TypedContractMethod<[], [boolean], "view">;

  shareFile: TypedContractMethod<
    [uid: AddressLike, cid: string, key: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addFile"
  ): TypedContractMethod<[cid: string, key: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createUser"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getFiles"
  ): TypedContractMethod<[], [Spxce.FileStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getSharedFiles"
  ): TypedContractMethod<[], [Spxce.FileStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isUser"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "shareFile"
  ): TypedContractMethod<
    [uid: AddressLike, cid: string, key: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
